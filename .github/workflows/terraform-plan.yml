name: Plan

on:
  pull_request:
    # Run tests when PRs opened or updated
    types: [opened, synchronize]
    branches:
      - master
      - develop
      
jobs:
  apply:
    name: "Configure"
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the source branch
      - name: "Checkout"
        uses: actions/checkout@main

      - name: "Zip Lambda"
        run: ./scripts/zip_lambda.sh

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:  
          AWS_KEY: "${{ secrets.AWS_KEY }}"
          AWS_SECRET: "${{ secrets.AWS_SECRET }}"

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
      - name: Cleanup creds
        if: always()
        run: rm -rf ~/.aws