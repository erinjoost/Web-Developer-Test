# This tests your repo  according to the
# information located in README-HEADER.md

name: Apply

on:
  pull_request:
    # Run tests when PRs opened or updated
    types: [closed]
    branches:
      - main
      - develop

jobs:
  apply:
    name: "Configure"
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the source branch
      - name: "Checkout"
        uses: actions/checkout@main

      # Select which aws enviornment according to the target branch.
      - name: 'Set AWS Profile'
        run: 
          ./scripts/CI/aws/set-profile.sh
        env:
          GITHUB_BASE_REF: "${{ github.base_ref }}"

      - name: 'Generate Credentials'
        run: source ./scripts/CI/aws/set-credentials.sh
        env:  
          AWS_KEY: "${{ secrets.AWS_KEY }}"
          AWS_SECRET: "${{ secrets.AWS_SECRET }}"
      
      # Setup Buildx for builder caching
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      # Cache Docker Layers Between Runs
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Build Builder
      - name: Build Builder
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          load: true
          tags:  ${{ github.event.repository.name }}-builder:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: "Zip Lambda"
        run: ./scripts/CI/run.sh ./scripts/zip_lambda.sh

      # Initialize TF and validate
      - name: "Terraform Apply"
        id: plan
        run: ./scripts/CI/run.sh ./scripts/terraform-apply.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "S3 Asset Promotion"
        id: s3
        run: ./scripts/CI/run.sh ./scripts/CI/promote_bucket_download.sh
      
      - name: "Upload Terraform Apply Artifact"
        uses: actions/upload-artifact@v1
        if: ${{ always() }}
        with:
          name: apply.txt
          path: apply.txt
      
      - name: "Upload S3 Sync Artifact"
        uses: actions/upload-artifact@v1
        if: ${{ always() }}
        with:
          name: s3-sync.txt
          path: s3-sync.txt
      
      - name: Cleanup creds
        if: always()
        run: rm -rf ~/.aws